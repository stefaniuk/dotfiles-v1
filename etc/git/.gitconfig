[alias]

    # http://stackoverflow.com/questions/2421011/output-of-git-branch-in-tree-like-fashion
    lgb = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset%n' --abbrev-commit --date=relative --branches

    # TODO:
    #   - last commits
    #   - commits in betweens dates
    #   - list all files changed in between dates/commits

    # View abbreviated SHA, description, and history graph of the latest 50 commits
    l = log --pretty=oneline -n 50 --graph --abbrev-commit
    ll = log --pretty=format:\"%C(yellow)%h%Creset %C(cyan)%ci%Creset %C(green)%ce%Creset%x09%s%C(cyan)%C(bold)%d%Creset\" -n 50 --graph
    # log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

    # View the current working tree status using the short format
    s = status -s

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat -R"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"

    # Clone a repository including all submodules
    c = clone --recursive

    # Commit all changes
    ca = !git add -A && git commit -av

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # find branches containing commit
    fbc = "!f() { git branch -a --contains $1; }; f"
    # find tags containing commit
    ftc = "!f() { git describe --always --contains $1; }; f"
    # find commits by source code
    fcs = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
    # find commits by commit message
    fcm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
    # find commit by tag
    fct = !sh -c 'git rev-list $0 | head -n 1'

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

[apply]

    # Fix whitespace errors when applying a patch
    whitespace = fix

[core]

    # Use custom `.gitattributes` and `.gitignore`
    attributesfile = ~/.gitattributes
    excludesfile = ~/.gitignore

    # List of common whitespace problems to notice
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Use word diff highlighting by default
    pager = diff-highlight | less -r

    # SEE: http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/
    trustctime = false

[color]

    branch = auto
    diff = auto
    grep = auto
    interactive = auto
    showBranch = auto
    status = auto
    ui = true

[color "diff"]

    #context =
    meta = blue
    frag = white bold
    #func =
    old = red
    new = green
    #commit =
    #whitespace =

[credential]

    # Temporarily store passwords in memory
    helper = cache --timeout 300

[diff]

    # Detect copies as well as renames
    renames = copies

[merge]

    # Include summaries of merged commits in newly created merge commit messages
    log = 1000
    # Improve resolving merge conflicts
    conflictStyle = diff3

[push]

    # Push only the current branch
    default = simple

[pull]

    # Rebase the current branch on top of the upstream branch after fetching
    rebase = preserve

[http]

    # accept self-signed SSL certificate
    #sslVerify = false

# URL shorthands

[url "git@github.com:"]

    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

    insteadOf = "github:"

[url "git@gist.github.com:"]

    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

    insteadOf = "gist:"
