#!/bin/bash

# exit if script is sourced
[ -n "$BASH_SOURCE" ] && [ "$(basename -- "$0")" != "dotfiles" ] && exit 1

################################################################################
# variables

REPOSITORY="dotfiles"
GITHUB_ACCOUNT=${GITHUB_ACCOUNT-stefaniuk}
BITBUCKET_ACCOUNT=${BITBUCKET_ACCOUNT-stefaniuk}
GITLAB_ACCOUNT=${GITLAB_ACCOUNT-stefaniuk}
USER_NAME=${USER_NAME-Daniel Stefaniuk}
USER_EMAIL=${USER_EMAIL-daniel.stefaniuk@gmail.com}
DIR=~

program_dir=$(cd "$(dirname "$0" 2> /dev/null)"; pwd)

arg_install=$(echo "$*" | grep -o -- "--install")
arg_config=$(echo "$*" | grep -o -- "--config")
arg_update=$(echo "$*" | grep -o -- "--update-os")
arg_test=$(echo "$*" | grep -o -- "--test")
arg_synchronise_only=$(echo "$*" | grep -o -- "--synchronise-only")
arg_force_download=$(echo "$*" | grep -o -- "--force-download")
arg_directory=$(echo "$*" | grep -Eo -- "--directory=[-_A-Za-z0-9/]+" | sed "s/--directory=//")
arg_minimal=$(echo "$*" | grep -o -- "--minimal")
arg_sudo=$(echo "$*" | grep -o -- "--sudo")
arg_help=$(echo "$*" | grep -o -- "--help")

arg_install_progs=$(echo "$*" | grep -o -- "--install=[-_,A-Za-z0-9]*" | sed "s/--install=//")
arg_config_progs=$(echo "$*" | grep -o -- "--config=[-_,A-Za-z0-9]*" | sed "s/--config=//")
if [ -z "$arg_config_progs" ] && [ -n "$arg_install_progs" ]; then
    arg_config_progs=$arg_install_progs
fi

################################################################################
# functions

function usage {

    local file=$(basename $0 2> /dev/null)
    echo "
Usage:
    ${file} [options]

Options:
    --update-os
    --install[=dependencies,{utils|tools|workstation}-package,prog1,prog2,...]
    --config[=all,prog1,prog2,...]
    --test
    --synchronise-only
    --force-download
    --directory=/dir
    --minimal
    --sudo
    --help
"

    exit 0
}

function sudo_keep_alive {

    # update user's time stamp, prompting for password if necessary
    sudo -v
    # keep-alive until script has finished then invalidate sudo session
    while true; do
        sudo -n true
        sleep 1
        if ! kill -0 "$$"; then
            sudo -k
            exit
        fi
    done 2>/dev/null &
}

function program_download {

    curl -L \
        "https://github.com/${GITHUB_ACCOUNT}/${REPOSITORY}/tarball/master" \
        -o $DIR/$REPOSITORY.tar.gz
    tar -zxf $DIR/$REPOSITORY.tar.gz -C $DIR
    rm -f $DIR/$REPOSITORY.tar.gz
    cp -rf $DIR/$GITHUB_ACCOUNT-$REPOSITORY-*/* $DIR
    rm -rf $DIR/$GITHUB_ACCOUNT-$REPOSITORY-*
    rm -rf $DIR/tmp/*
}

function program_synchronise {

    printf "Synchronise $REPOSITORY\n\n"

    rsync -rav \
        --include=/ \
        --exclude=/.git* \
        --exclude=.gitkeep \
        --exclude=Dockerfile \
        --exclude=LICENCE \
        --exclude=Makefile \
        --exclude=provision.sh \
        --exclude=README.md \
        --exclude=Vagrantfile \
        $program_dir/* \
        $DIR

    printf "\n"
}

function program_setup {

    chmod 700 $DIR/{bin,etc,lib,sbin,tmp,usr,usr/bin}
    chmod 500 $DIR/{bin,usr/bin}/*
    chmod 500 $DIR/dotfiles

    # detect operating system
    source $DIR/lib/resources/bash/.bash_system
    # make available custom scripts
    export PATH=$PATH:$DIR/bin:$DIR/usr/bin

    # synchronise only
    [ -n "$arg_synchronise_only" ] && exit 0

    print_h1 "Checking..."

    # check internet connection
    print_h2 "Network connectivity"
    curl --silent --insecure --max-time 10 --retry 3 "https://google.com" > /dev/null
    if [[ $? -ne 0 ]]; then
        print_err "No network"
    fi
    # check operating system
    print_h2 "Operating system"
    if [ $DIST != "macosx" ] \
            && [ $DIST != "ubuntu" ] \
            && [ $DIST != "debian" ] \
            && [ $DIST != "centos" ] \
            && [ $DIST != "scientific" ]; then
        print_err "Operating system not supported"
    fi

    # initialise
    [ -f $DIR/sbin/$DIST-initialise ] && (
        print_h1 "Initialising..."
        [ -f $DIR/sbin/$DIST-include ] && . $DIR/sbin/$DIST-include $*
        [ -f $DIR/sbin/$DIST-initialise ] && . $DIR/sbin/$DIST-initialise $*
    )
    # update
    [ -n "$arg_update" ] && [ -f $DIR/sbin/$DIST-update ] && (
        print_h1 "Updating..."
        [ -f $DIR/sbin/$DIST-include ] && . $DIR/sbin/$DIST-include $*
        [ -f $DIR/sbin/$DIST-update ] && . $DIR/sbin/$DIST-update $*
    )
    # install
    [ -n "$arg_install" ] && [ -f $DIR/sbin/$DIST-install ] && (
        print_h1 "Installing..."
        [ -f $DIR/sbin/$DIST-include ] && . $DIR/sbin/$DIST-include $*
        [ -f $DIR/sbin/$DIST-install ] && . $DIR/sbin/$DIST-install $*
    )
    # config
    [ -n "$arg_config" ] && [ -f $DIR/sbin/$DIST-config ] && (
        print_h1 "Configuring..."
        [ -f $DIR/sbin/$DIST-include ] && . $DIR/sbin/$DIST-include $*
        [ -f $DIR/sbin/$DIST-config ] && . $DIR/sbin/$DIST-config $*
    )
    # test
    [ -n "$arg_test" ] && /bin/bash -cli "system_test --skip-selected-tests"

    # remove not needed resources
    if [ -n "$arg_minimal" ]; then
        rm -rf $DIR/{lib,sbin,usr/man,.*profile.old}
        # remove tests
        find $DIR/{bin,usr/bin}/* -iname '*.test' -exec rm -rf {} +
        rm $DIR/bin/asserts
    fi
    rm -rf $DIR/{.gitignore,Dockerfile,LICENCE,Makefile,README.md,Vagrantfile,provision.sh}
    find $DIR/{bin,etc,lib,sbin,tmp,usr} -type f -name '.gitkeep' -exec rm -f {} +
}

function install_app {

    for app in "$@"; do
        _should_install $app && _run_install $app
    done
}

function _should_install {

    _is_on_list "$arg_install_progs" "$1"
    return $?
}

function _run_install {

     [ -f $DIR/lib/$1 ] && (
        # source the requested installation script
        . $DIR/lib/$1 $*
        # check if installation function exists
        if type -t "$DIST-install-$1" | grep -q "^function$"; then
            func="$DIST-install-$1"
        elif type -t "install-$1" | grep -q "^function$"; then
            func="install-$1"
        fi
        # run the installation function
        if [ -n "$func" ]; then
            print_h2 $1
            $func $*
        fi
    )
}

function config_app {

    for app in "$@"; do
        _should_config $app && _run_config $app
    done
}

function _should_config {

    _is_on_list "$arg_config_progs" "$1" || _is_on_list "$arg_config_progs" "all"
    return $?
}

function _run_config {

     [ -f $DIR/lib/$1 ] && (
        # source the requested configuration script
        . $DIR/lib/$1 $*
        # check if configuration function exists
        if type -t "$DIST-config-$1" | grep -q "^function$"; then
            func="$DIST-config-$1"
        elif type -t "config-$1" | grep -q "^function$"; then
            func="config-$1"
        fi
        # run the configuration function
        if [ -n "$func" ]; then
            print_h2 $1
            $func $*
        fi
    )
}

function _is_on_list {

    local list=$1
    local item=$2

    [ -z "$list" ] && return 1

    echo "$list" | grep "^${item}$" > /dev/null 2>&1 && return 0 # is a
    echo "$list" | grep "^${item}," > /dev/null 2>&1 && return 0 # starts with
    echo "$list" | grep ",${item}$" > /dev/null 2>&1 && return 0 # ends with
    echo "$list" | grep ",${item}," > /dev/null 2>&1 && return 0 # contains

    return 1
}

################################################################################
# main

[ -n "$arg_help" ] && usage
[ -n "$arg_sudo" ] && sudo_keep_alive
[ -n "$arg_directory" ] && DIR=$arg_directory

# use colours in terminal
if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color > /dev/null 2>&1; then
    export TERM="gnome-256color"
elif infocmp xterm-256color > /dev/null 2>&1; then
    export TERM="xterm-256color"
fi

if [ -z "$BASH_SOURCE" ] || [ -n "$arg_force_download" ]; then

    # download from repository
    program_download

elif [[ $program_dir == */projects/$REPOSITORY ]] || [[ $program_dir == */projects/$GITLAB_ACCOUNT/$REPOSITORY ]] || [[ $program_dir == /project ]]; then

    # synchronise with project
    program_synchronise

fi

# perform post-install configuration
program_setup $*

exit 0
