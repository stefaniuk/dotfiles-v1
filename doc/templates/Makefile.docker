PROJECT := name
ENVIRONMENT := local

help:
	@echo
	@echo "Usage:"
	@echo
	@echo "    make all [NAME=name] [ENVIRONMENT=environment]"
	@echo "    make build [NAME=name] [ENVIRONMENT=environment]"
	@echo "    make start|stop"
	@echo "    make log [NAME=name]"
	@echo "    make bash NAME=name"
	@echo "    make clean|remove [NAME=name]"
	@echo "    make export-container|import-container|validate-container-archive NAME=name"
	@echo "    make export-project|validate-project-archive"
	@echo

all: clean build start
build:
	@if [ "$(NAME)" = "" ]; then \
		make build NAME=name; \
	else \
		echo "Building '$(PROJECT)/$(NAME)' image..."; \
		docker build --tag=$(PROJECT)/$(NAME) --rm docker/$(ENVIRONMENT)/$(NAME); \
	fi
start:
	@echo "Starting all containers..."
	@docker-compose up --no-build --no-recreate -d
stop:
	@echo "Stopping all containers..."
	@docker-compose stop
log:
	@echo "Logging output..."
	@if [ "$(NAME)" = "" ]; then \
		docker-compose logs; \
	else \
		docker logs --follow $(NAME); \
	fi
bash:
	@echo "Bashing into '$(NAME)' container..."
	@docker exec --interactive --tty $(NAME) /bin/bash --login
clean:
	@if [ "$(NAME)" = "" ]; then \
		make clean NAME=name; \
	else \
		echo "Removing '$(NAME)' container..."; \
		docker stop $(NAME) > /dev/null 2>&1 ||:; \
		docker rm $(NAME) > /dev/null 2>&1 ||:; \
	fi
remove:
	@if [ "$(NAME)" = "" ]; then \
		make remove NAME=name; \
	else \
		make clean NAME=$(NAME); \
		echo "Removing '$(PROJECT)/$(NAME)' image..."; \
		docker rmi $(PROJECT)/$(NAME) > /dev/null 2>&1 ||:; \
	fi

export-container:
	@echo "Exporting '$(PROJECT)/$(NAME)' container..."
	@docker save $(PROJECT)/$(NAME) | gzip -1 > dist/$(PROJECT)-$(NAME).tar.gz
	@cd dist; sha256sum $(PROJECT)-$(NAME).tar.gz > $(PROJECT)-$(NAME).tar.gz.sha256
import-container:
	@echo "Importing '$(PROJECT)/$(NAME)' container..."
	@gunzip -c dist/$(PROJECT)-$(NAME).tar.gz | docker load
validate-container-archive:
	@echo "Validating '$(PROJECT)/$(NAME)' container archive..."
	@cd dist; sha256sum -c $(PROJECT)-$(NAME).tar.gz.sha256

export-project:
	@echo "Exporting project..."
	@git archive --format=tar.gz --prefix=$(PROJECT)/ HEAD > dist/$(PROJECT).tar.gz
	@cd dist; sha256sum $(PROJECT).tar.gz > $(PROJECT).tar.gz.sha256
validate-project-archive:
	@echo "Validating project archive..."
	@cd dist; sha256sum -c $(PROJECT).tar.gz.sha256

.PHONY: log
.SILENT:
