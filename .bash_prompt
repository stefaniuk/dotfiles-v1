#!/bin/sh

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color > /dev/null 2>&1; then
    export TERM="gnome-256color"
elif infocmp xterm-256color > /dev/null 2>&1; then
    export TERM="xterm-256color"
fi

if tput setaf 1 &> /dev/null; then
    tput sgr0
    bold=$(tput bold)
    reset=$(tput sgr0)
    black=$(tput setaf 0)
    blue=$(tput setaf 33)
    cyan=$(tput setaf 37)
    green=$(tput setaf 64)
    orange=$(tput setaf 166)
    pink=$(tput setaf 9)
    purple=$(tput setaf 125)
    red=$(tput setaf 124)
    violet=$(tput setaf 61)
    white=$(tput setaf 15)
    yellow=$(tput setaf 136)
else
    bold=""
    reset="\e[0m"
    black="\e[1;30m"
    blue="\e[1;34m"
    cyan="\e[1;36m"
    green="\e[1;32m"
    orange="\e[1;33m"
    pink="\e[1;31m"
    purple="\e[1;35m"
    red="\e[1;31m"
    violet="\e[1;35m"
    white="\e[1;37m"
    yellow="\e[1;33m"
fi

__prompt_git() {

    local s=""
    local branchName=""

    # check if the current directory is in a git repository
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
            # ensure the index is up-to-date
            git update-index --really-refresh -q &> /dev/null
            # check for uncommitted changes in the index
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s+='+'
            fi
            # check for unstaged changes
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s+='!'
            fi
            # check for untracked files
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s+='?'
            fi
            # check for stashed files
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s+='$'
            fi
        fi

        # get the short symbolic ref
        # if HEAD isn't a symbolic ref, get the short SHA for the latest commit
        # otherwise, just give up
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')"

        [ -n "${s}" ] && s=" [${s}]"

        echo -e "${1}${branchName}${reset}${blue}${s}";
    else
        return
    fi
}

# highlight the user and host name when logged in as root
if [[ "${USER}" == "root" ]]; then
    userStyle="${pink}"
    hostStyle="${pink}"
else
    userStyle="${orange}"
    hostStyle="${yellow}"
fi

prompt_command() {

    # status
    local code=$?
    local status=
    if [ $code -ne 0 ]; then
        status=" \[${reset}${pink}\](${code})"
    fi

    PS1="\[\033]0;\w\007\]"
    PS1+="\[${bold}${userStyle}\]\u"                                    # ${user}
    PS1+="\[${reset}${white}\] at "                                     # at
    PS1+="\[${bold}${hostStyle}\]\h"                                    # ${host}
    PS1+="\[${reset}${white}\] in "                                     # in
    PS1+="\[${bold}${green}\]\w"                                        # ${dir}
    PS1+="\$(__prompt_git \"${reset}${white} on ${bold}${violet}\")"    # on ${branch}
    PS1+="${status}"                                                    # ${status}
    PS1+="\[${white}\] \$ \[${reset}\]"
    export PS1

    PS2="\[${white}\]â†’ \[${reset}\]"
    export PS2
}
