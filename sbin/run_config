#!/bin/bash

################################################################################
# functions

function print_progress() {
    tput setaf 15
    tput bold
    echo "$1"
    tput sgr 0
}

function print_title() {
    tput setaf 4
    tput bold
    echo "$1"
    tput sgr 0
}

function print_info() {
    tput setaf 3
    echo "    $1"
    tput sgr 0
}

function print_error() {
    tput setaf 1
    echo "$1"
    echo
    tput sgr 0
}

################################################################################
# arguments                                                                    #
################################################################################

args=$*
arg_common_only=$(echo "$args"      | grep -o -- "--common-only")
arg_force_mintleaf=$(echo "$args"   | grep -o -- "--force-mintleaf")
arg_force_oh_my_zsh=$(echo "$args"  | grep -o -- "--force-oh-my-zsh")
arg_update_system=$(echo "$args"    | grep -o -- "--update-system")
arg_update_packages=$(echo "$args"  | grep -o -- "--update-packages")

################################################################################
# main                                                                         #
################################################################################

# check operating system
print_progress "Checking OS..."
if ([ ! -f /etc/debian_version ] || [ $(cat /etc/os-release | grep "^ID=" | awk -F= '{ print $2 }') != "ubuntu" ]) && [[ "$OSTYPE" != "darwin"* ]]; then
    print_error "Operating system not supported"
    exit 1
fi

# check internet connection
print_progress "Checking internet connection..."
wget --quiet --timeout=10 --tries=3 --spider "https://google.com"
if [[ $? -ne 0 ]]; then
    print_error "No internet connection"
    exit 2
fi

exit 123

# install MintLeaf
[ -z "$MINTLEAF_HOME" ] && MINTLEAF_HOME=/usr/local/mintleaf
if [ ! -f $MINTLEAF_HOME/bin/bootstrap ] || [ -n "$arg_force_mintleaf" ]; then
    print_progress "Installing MintLeaf..."
    wget https://raw.githubusercontent.com/stefaniuk/mintleaf/master/src/bin/install.sh -O - | /bin/bash -s -- \
        $arg_update_system $arg_update_packages \
        --mintleaf \
        --git
    # TODO: check exit code of the install script
fi
if [ -f $MINTLEAF_HOME/bin/bootstrap ]; then
    source $MINTLEAF_HOME/bin/bootstrap
else
    print_error "MintLeaf is missing"
    exit 3
fi

# install Oh My Zsh
if [ ! -d ~/.oh-my-zsh ] || [ -n "$arg_force_oh_my_zsh" ]; then
    print_progress "Installing Oh My Zsh..."
    rm -rf ~/{.oh-my-zsh,.zcompdump-*,.zlogin,.zsh*}
    git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
    cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
    #sudo chsh -s /bin/zsh $USER
fi
if [ ! -f ~/.oh-my-zsh/oh-my-zsh.sh ]; then
    print_error "Oh My Zsh is missing"
    exit 4
fi

# install components via MintLeaf
print_progress "Installing components via MintLeaf..."
(. $MINTLEAF_HOME/bin/install.sh $*)
[ $? != 0 ] && exit 5
source $MINTLEAF_HOME/bin/bootstrap

# install components
if [ "$DIST" == "ubuntu" ]; then

    print_progress "Installing components via apt-get..."
    apt-get --yes --force-yes --ignore-missing --no-install-recommends install \
        bash-completion \
        grc

elif [ "$DIST" == "macosx" ]; then

    print_progress "Installing components via brew..."
    brew install \
        bash-completion \
        grc \
        irssi \
        2> /dev/null

fi

mkdir -p ~/projects
# install dotfiles repository
print_progress "Installing dotfiles repository..."
if [ ! -d ~/projects/dotfiles ]; then
    git clone https://github.com/stefaniuk/dotfiles.git ~/projects/dotfiles
else
    (cd ~/projects/dotfiles; git pull)
fi
# install terminal commands repository
print_progress "Installing terminal commands repository..."
if [ ! -d ~/projects/commands ]; then
    git clone https://github.com/stefaniuk/commands.git ~/projects/commands
else
    (cd ~/projects/commands; git pull)
fi
# install keyboard shortcuts repository
print_progress "Installing keyboard shortcuts repository..."
if [ ! -d ~/projects/shortcuts ]; then
    git clone https://github.com/stefaniuk/shortcuts.git ~/projects/shortcuts
else
    (cd ~/projects/shortcuts; git pull)
fi
# install MintLeaf repository
print_progress "Installing MintLeaf repository..."
if [ ! -d ~/projects/mintleaf ]; then
    git clone https://github.com/stefaniuk/mintleaf.git ~/projects/mintleaf
else
    (cd ~/projects/mintleaf; git pull)
fi
# install package manager repository
print_progress "Installing package manager repository..."
if [ ! -d ~/projects/pkg-manager ]; then
    git clone https://github.com/stefaniuk/pkg-manager.git ~/projects/pkg-manager
else
    (cd ~/projects/pkg-manager; git pull)
fi
# install package utilities repository
print_progress "Installing package utilities repository..."
if [ ! -d ~/projects/pkg-util ]; then
    git clone https://github.com/stefaniuk/pkg-util.git ~/projects/pkg-util
else
    (cd ~/projects/pkg-util; git pull)
fi

# configure common components
#print_progress "Configuring common components..."
#(. ./bin/config.sh)
#[ $? != 0 ] && exit 6

#if [ -z "$arg_common_only" ]; then

    # configure distribution specific components
    #print_progress "Configuring distribution specific components..."
    #(. ./bin/config.$DIST.sh)
    #[ $? != 0 ] && exit 7

#fi

################################################################################
# bash                                                                         #
################################################################################

print_title "Configure bash"

# resources
cp ./.{bashrc,path,bash_prompt,bash_exports,bash_functions,bash_aliases,bash_completion} ~ 2> /dev/null
cp ./.{bashrc,bash_*}.$DIST ~ 2> /dev/null
mkdir -p ~/bin
cp ./bin/* ~/bin
rm ~/bin/{install,config*}.sh
file_replace_str "USER_NAME=\"unknown\"" "USER_NAME=\"$USER_NAME\"" ~/.bash_exports
file_replace_str "USER_EMAIL=\"unknown\"" "USER_EMAIL=\"$USER_EMAIL\"" ~/.bash_exports

# profile
[ -f ~/.profile ] && [ ! -f ~/.profile.old ] && mv ~/.profile ~/.profile.old
[ -f ~/.bash_profile ] && [ ! -f ~/.bash_profile.old ] && mv ~/.bash_profile ~/.bash_profile.old
cat << EOF > ~/.bash_profile
# BEGIN: load .bashrc
[[ -r ~/.bashrc ]] && source ~/.bashrc
# END: load .bashrc
EOF

################################################################################
# zsh                                                                          #
################################################################################

print_title "Configure zsh"

# resources
cp ./.zshrc* ~

################################################################################
# Git                                                                          #
################################################################################

print_title "Configure Git"

# resources
cp ./config/git/.git* ~

# configuration
git config --global user.name "$USER_NAME"
git config --global user.email "$USER_EMAIL"
git config --global push.default simple

# completion
[ -f /etc/bash_completion ] && bcpath=/etc || bcpath=/usr/local/etc
if [ -d $bcpath/bash_completion.d ] && [ ! -f $bcpath/bash_completion.d/git-completion.bash ]; then
    wget https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -O $bcpath/bash_completion.d/git-completion.bash
fi
unset bcpath

################################################################################
# Vim                                                                          #
################################################################################

if which vim > /dev/null; then

    print_title "Configure Vim"

    # resources
    mkdir -p ~/.vim
    cp -Rf ./config/vim/{colors,plugin} ~/.vim
    cp -f ./config/vim/.vimrc ~
    mkdir -p ~/.vim/{autoload,bundle}

    # vundle
    if [ ! -d ~/.vim/bundle/Vundle.vim ]; then
        git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
    else
        (cd ~/.vim/bundle/Vundle.vim; git pull)
    fi
    # pathogen
    curl -LSso ~/.vim/autoload/pathogen.vim https://raw.githubusercontent.com/tpope/vim-pathogen/master/autoload/pathogen.vim

    # solarized
    if [ ! -d ~/.vim/bundle/vim-colors-solarized ]; then
        git clone git://github.com/altercation/vim-colors-solarized.git ~/.vim/bundle/vim-colors-solarized
    else
        (cd ~/.vim/bundle/vim-colors-solarized; git pull)
    fi
    # nerdtree
    if [ ! -d ~/.vim/bundle/nerdtree ]; then
        git clone https://github.com/scrooloose/nerdtree.git ~/.vim/bundle/nerdtree
    else
        (cd ~/.vim/bundle/nerdtree; git pull)
    fi

fi

################################################################################
# Midnight Commander                                                           #
################################################################################

if which mc > /dev/null; then

    print_title "Configure Midnight Commander"

    # resources
    mkdir -p ~/.config/mc
    cp -f ./config/mc/* ~/.config/mc

fi

################################################################################
# Maven                                                                        #
################################################################################

if which mvn > /dev/null; then

    print_title "Configure Maven"

    # resources
    mkdir -p ~/.m2
    cp -f ./config/maven/settings*.xml ~/.m2

fi

################################################################################
# Irssi                                                                        #
################################################################################

if which irssi > /dev/null; then

    print_title "Configure Irssi"

    # resources
    mkdir -p ~/.irssi
    cp -f ./config/irssi/config ~/.irssi
    file_replace_str "real_name = \"\"" "real_name = \"$USER_NAME\"" ~/.irssi/config

fi

################################################################################

exit 0
